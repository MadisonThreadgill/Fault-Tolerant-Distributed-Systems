


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           OS          ; Struct of type OS
                                                            _DATA Relevently Co
                                                            ntains:
   14 00000000         ; MEM[OS+0] Currently running thread
   15 00000000         ; MEM[OS+4] Jump thread
   16 00000000         
   17 00000000                 EXPORT           StartOS
   18 00000000                 EXPORT           ContextSwitch
   19 00000000                 EXPORT           PendSV_Handler
   20 00000000                 EXPORT           SVC_Handler
   21 00000000         
   22 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   23 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   24 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   25 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   26 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   28 00000000 08000000 
                       NVIC_UNPENDSVSET
                               EQU              0x08000000  ; Value to disarm  



ARM Macro Assembler    Page 2 


                                                            PendSV exception.
   29 00000000 FFFFFFF1 
                       EXE_RET_HANDLER
                               EQU              0xFFFFFFF1  ; Non FP, Return to
                                                             handler, Use MSP 
   30 00000000 FFFFFFF9 
                       EXE_RET_THREAD
                               EQU              0xFFFFFFF9  ; Non FP, Return to
                                                             thread, Use MSP 
   31 00000000         
   32 00000000         StartOS
   33 00000000 B672            CPSID            I           ; Disable interupts
                                                            
   34 00000002 481B            LDR              R0, =OS     ; R0 = pointer to O
                                                            S_DATA:{ TCB_RunPt,
                                                             TCB_Jump ... }
   35 00000004 6801            LDR              R1, [R0]    ; R1 = TCB_RunPt
   36 00000006         
   37 00000006         ;Load SP from TCB, do not modify given TCB
   38 00000006 F8D1 D004       LDR              SP, [R1, #4] ; Changes with TCB
                                                            !, assumes that SP 
                                                            is 2nd element of T
                                                            CB!
   39 0000000A         
   40 0000000A         ;Pop values of stack to start execution
   41 0000000A E8BD 0FF0       POP              {R4-R11}    ; restore manually 
                                                            pushed registers in
                                                             order
   42 0000000E BC0F            POP              {R0-R3}     ; restore ISR Regis
                                                            ters (4/8)
   43 00000010 F85D CB04       POP              {R12}       ; restore ISR Regis
                                                            ters (5/8)
   44 00000014 F85D EB04       POP              {LR}        ; discard initial L
                                                            R
   45 00000018 F85D EB04       POP              {LR}        ; Load new thread's
                                                             PC into LR
   46 0000001C BC02            POP              {R1}        ; discard PSR
   47 0000001E         
   48 0000001E         ;Re-enable Interupts and jump to thread
   49 0000001E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   50 00000020 4770            BX               LR          ; start first threa
                                                            d
   51 00000022         
   52 00000022         OSStartHang
   53 00000022 E7FE            B                OSStartHang ; Should never get 
                                                            here
   54 00000024         
   55 00000024         ;*******************************************************
                       *************************************************
   56 00000024         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   57 00000024         ;                                           void Context
                       Switch(void)
   58 00000024         ;
   59 00000024         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   60 00000024         ;              triggers the PendSV exception which is wh



ARM Macro Assembler    Page 3 


                       ere the real work is done.
   61 00000024         ;*******************************************************
                       *************************************************
   62 00000024         
   63 00000024         ContextSwitch
   64 00000024 4813            LDR              R0, =NVIC_INT_CTRL 
                                                            ; R0 = 0xE000ED04 
   65 00000026 F04F 5180       LDR              R1, =NVIC_PENDSVSET 
                                                            ; R2 = 0x10000000
   66 0000002A 6001            STR              R1, [R0]    ; Activate PendSV, 
                                                            since Memory map st
                                                            ates writes of 0 ha
                                                            ve no impact, this 
                                                            should be safe
   67 0000002C 4770            BX               LR
   68 0000002E         
   69 0000002E         ;*******************************************************
                       *************************************************
   70 0000002E         ;                                         HANDLE PendSV 
                       EXCEPTION
   71 0000002E         ;                                     void OS_CPU_PendSV
                       Handler(void)
   72 0000002E         ;
   73 0000002E         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   74 0000002E         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   75 0000002E         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   76 0000002E         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   77 0000002E         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   78 0000002E         ;              a thread or occurs due to an interrupt or
                        exception.
   79 0000002E         ;
   80 0000002E         ;           2) Pseudo-code is:
   81 0000002E         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   82 0000002E         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   83 0000002E         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   84 0000002E         ;              d) Call OSTaskSwHook();
   85 0000002E         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   86 0000002E         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
   87 0000002E         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
   88 0000002E         ;              h) Restore R4-R11 from new process stack;
                       
   89 0000002E         ;              i) Perform exception return which will re
                       store remaining context.
   90 0000002E         ;
   91 0000002E         ;           3) On entry into PendSV handler:
   92 0000002E         ;              a) The following have been saved on the p
                       rocess stack (by processor):
   93 0000002E         ;                 xPSR, PC, LR, R12, R0-R3



ARM Macro Assembler    Page 4 


   94 0000002E         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
   95 0000002E         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
   96 0000002E         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
   97 0000002E         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
   98 0000002E         ;
   99 0000002E         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  100 0000002E         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  101 0000002E         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  102 0000002E         ;*******************************************************
                       *************************************************
  103 0000002E         
  104 0000002E         PendSV_Handler
  105 0000002E B672            CPSID            I
  106 00000030         ;Acknowlege pendsv interupt
  107 00000030 4810            LDR              R0, =NVIC_INT_CTRL 
                                                            ; R0 = 0xE000ED04 
  108 00000032 F04F 6100       LDR              R1, =NVIC_UNPENDSVSET 
                                                            ; R2 = 0x08000000 
  109 00000036 6001            STR              R1, [R0]    ; Acknowlege interu
                                                            pt
  110 00000038         
  111 00000038         ;Push Data to the stack that was not pushed by interupt 
                       handler to the stack
  112 00000038 E92D 0FF0       PUSH             {R4-R11}    ; Stack now looks l
                                                            ike { R4-R11, R0-R3
                                                            , R12, LR(R14), PC(
                                                            R15), PSR } from in
                                                            terupt
  113 0000003C         
  114 0000003C         ;Get TCB_RunPT and TCB_Jump. Save stack pointer then det
                       ermine if jump os required
  115 0000003C 480C            LDR              R0, =OS     ; R0 = pointer to O
                                                            S_DATA:{ TCB_RunPt,
                                                             TCB_Jump ... }
  116 0000003E 6801            LDR              R1, [R0]    ; R1 = TCB_RunPt = 
                                                            { *TCB_Next, curr_s
                                                            tack_ptr ... }
  117 00000040 6842            LDR              R2, [R0, #4] ; R2 = TCB_Jump
  118 00000042 F8C1 D004       STR              SP, [R1, #4] ; TCB_RunPt->curr_
                                                            stack_ptr = SP 
  119 00000046 2A00            CMP              R2, #0      ; Check if need to 
                                                            do a TCB JMP
  120 00000048 D009            BEQ              Normal_CTX  ; Either Continue w
                                                            ith a normal CTX or
                                                             do a JMP
  121 0000004A         
  122 0000004A         ; If JMP: Clear the JMP, update TCB_RunPt,
  123 0000004A F04F 0100       MOV              R1, #0
  124 0000004E 6041            STR              R1, [R0, #4] ; TCB_Jump = 0
  125 00000050 6002            STR              R2, [R0]    ; TCB_RunPt = TCB_J
                                                            ump
  126 00000052 F8D2 D004       LDR              SP, [R2, #4] ; Changes with TCB



ARM Macro Assembler    Page 5 


                                                            !, assumes that SP 
                                                            is 2nd element of T
                                                            CB!
  127 00000056 E8BD 0FF0       POP              {R4-R11}    ; Load new Context 
                                                            using SP, but not t
                                                            he remaining 8 ISR 
                                                            registers
  128 0000005A B662            CPSIE            I           ; Re-enable Interup
                                                            ts and jump to thre
                                                            ad
  129 0000005C 4770            BX               LR          ; Start/Continue Th
                                                            read
  130 0000005E         
  131 0000005E         
  132 0000005E         Normal_CTX                           ; If we are a norma
                                                            l context switch, 
  133 0000005E 6809            LDR              R1, [R1]    ; R1 = TCB_RunPt->n
                                                            ext_tcb
  134 00000060 6001            STR              R1, [R0]    ; TCB_RunPt = R1   
                                                             
  135 00000062 F8D1 D004       LDR              SP, [R1, #4] ; Changes with TCB
                                                            !, assumes that SP 
                                                            is 2nd element of T
                                                            CB!
  136 00000066 E8BD 0FF0       POP              {R4-R11}    ; Load new Context 
                                                            using SP, but not t
                                                            he remaining 8 ISR 
                                                            registers
  137 0000006A B662            CPSIE            I           ; Re-enable Interup
                                                            ts and jump to thre
                                                            ad
  138 0000006C 4770            BX               LR          ; Start/Continue Th
                                                            read
  139 0000006E         
  140 0000006E         
  141 0000006E         ;*******************************************************
                       *************************************************
  142 0000006E         ;                                         HANDLE SVC EXC
                       EPTION
  143 0000006E         ;                                     void OS_CPU_SVCHan
                       dler(void)
  144 0000006E         ;
  145 0000006E         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  146 0000006E         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  147 0000006E         ;           found relative to the return address saved o
                       n the stack on exception entry.
  148 0000006E         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  149 0000006E         ;*******************************************************
                       *************************************************
  150 0000006E         
  151 0000006E                 IMPORT           OS_Id
  152 0000006E                 IMPORT           OS_Kill
  153 0000006E                 IMPORT           OS_Sleep
  154 0000006E                 IMPORT           OS_Time
  155 0000006E                 IMPORT           OS_AddThread
  156 0000006E         



ARM Macro Assembler    Page 6 


  157 0000006E         SVC_Handler
  158 0000006E         ; put your Lab 5 code here
  159 0000006E         
  160 0000006E         
  161 0000006E 4770            BX               LR          ; Return from excep
                                                            tion
  162 00000070         
  163 00000070         
  164 00000070         
  165 00000070                 ALIGN
  166 00000070                 END
              00000000 
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\osasm.d -o.\osasm.o -I.\RTE\_Lab6 -IC:\Users\maham\AppData\Local
\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__MICROLIB S
ETA 1" --predefine="__UVISION_VERSION SETA 534" --predefine="_RTE_ SETA 1" --pr
edefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\osasm.lst ..\
RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 00000024

Symbol: ContextSwitch
   Definitions
      At line 63 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
Normal_CTX 0000005E

Symbol: Normal_CTX
   Definitions
      At line 132 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 120 in file ..\RTOS_Labs_common\osasm.s
Comment: Normal_CTX used once
OSStartHang 00000022

Symbol: OSStartHang
   Definitions
      At line 52 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 53 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 0000002E

Symbol: PendSV_Handler
   Definitions
      At line 104 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 19 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
SVC_Handler 0000006E

Symbol: SVC_Handler
   Definitions
      At line 157 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 20 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
StartOS 00000000

Symbol: StartOS
   Definitions
      At line 32 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

EXE_RET_HANDLER FFFFFFF1

Symbol: EXE_RET_HANDLER
   Definitions
      At line 29 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: EXE_RET_HANDLER unused
EXE_RET_THREAD FFFFFFF9

Symbol: EXE_RET_THREAD
   Definitions
      At line 30 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: EXE_RET_THREAD unused
NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 22 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 64 in file ..\RTOS_Labs_common\osasm.s
      At line 107 in file ..\RTOS_Labs_common\osasm.s

NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 65 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_PENDSVSET used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: NVIC_SYSPRI15
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
NVIC_UNPENDSVSET 08000000

Symbol: NVIC_UNPENDSVSET
   Definitions
      At line 28 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 108 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_UNPENDSVSET used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS 00000000

Symbol: OS
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 34 in file ..\RTOS_Labs_common\osasm.s
      At line 115 in file ..\RTOS_Labs_common\osasm.s

OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 155 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_AddThread unused
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 151 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Id unused
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 152 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Kill unused
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 153 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Sleep unused
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 154 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Time unused
6 symbols
358 symbols in table
